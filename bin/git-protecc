#!/usr/bin/env bash

ARGS=($@)
NPM_GLOBAL_PATH="$(npm config get prefix)"

is_git_repo() {
 $(git rev-parse --is-inside-work-tree 2> /dev/null)
}

info() {
  echo "usage: git-protecc <commands>"
  echo ""
  echo "execute on a git repository"
  echo ""
  echo "commands:"
  echo "  branch                   list all protected branches"
  echo "  branch add <branch>      add branch to protected branches"
  echo "  branch remove <branch>   remove branch from protected branches"
}

check_args() {
  # echo args
  # echo $ARGS
  # echo wat
  # echo "${ARGS[*]:2}"

  if [ "${ARGS[*]}" = "" ]; then
    echo "no args"
    info
    exit 0
  elif [ "${ARGS[*]}" = "--help" ]; then
    echo "--help"
    info
    exit 0
  elif [ "${ARGS[*]}" = "--h" ]; then
    echo "-h"
    info
    exit 0
  elif [ "${ARGS[*]}" = "branch" ]; then
    protected_branches
    exit 0
  elif [ "${ARGS[*]:0:2}" = "branch add" ]; then
    add_protected_branch ${ARGS[*]:2}
    protected_branches
    exit 0
  elif [ "${ARGS[*]:0:2}" = "branch remove" ]; then
    remove_protected_branch ${ARGS[*]:2}
    protected_branches
    exit 0
  else
    echo "Invalid command git-protecc ${ARGS[*]}"
    echo ""
    info
    exit 1
  fi
}

protected_branches() {
  echo -e $(git config --get-all git-protecc.branch)
}

is_existing_git_branch() {
  # supress all output
  $(git rev-parse --verify $1 > /dev/null 2>&1)
}

git_branch_exist() {
  branch=($@)
  for branch in "${branch[@]}"
  do
    if ! is_existing_git_branch $branch; then
      echo "Invalid git branch $branch"
      echo ""
      info
      exit 1
    fi
  done
}

protected_branch_exist() {
  branch=($@)
  for branch in "${branch[@]}"
  do
    if ! is_protected_branch $branch; then
      echo "Invalid git-protecc branch $branch"
      echo ""
      info
      exit 1
    fi
  done
}

is_protected_branch() {
  $(git config --get-all git-protecc.branch | grep $1$ > /dev/null 2>&1)
}

add_protected_branch() {
  git_branch_exist $@

  for branch in $@
  do
    if ! is_protected_branch $branch; then
      git config --add git-protecc.branch $branch
    fi
  done
}

remove_protected_branch() {
  protected_branch_exist $@

  for branch in $@
  do
    if is_protected_branch $branch; then
      git config --unset git-protecc.branch $branch
    fi
  done
}

if is_git_repo;
then
  check_args
  cp -i ${NPM_GLOBAL_PATH}/lib/node_modules/git-protecc/pre-push .git/hooks/
  info
  exit 0
else
  echo "git-protecc should be executed on a git repository"
  exit 1
fi
